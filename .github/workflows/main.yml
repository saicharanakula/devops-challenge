name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Start build timer
      id: start-timer
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest behave requests pytest-cov

    - name: Run unit tests with coverage
      id: run-tests
      run: |
        pytest --cov=./ > coverage.txt
        COVERAGE=$(grep "TOTAL" coverage.txt | awk '{print $4}')
        echo "Test coverage: ${COVERAGE}%"
        echo "COVERAGE=${COVERAGE}"
      shell: bash
      continue-on-error: true

    - name: Build Docker image
      id: build-docker
      run: docker build -t charan0026/devopa-app:latest .
    
    - name: End build timer and calculate build time
      id: end-timer
      run: |
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - $BUILD_START))
        echo "Build time: ${BUILD_TIME} seconds"
        echo "BUILD_TIME=${BUILD_TIME}"
      shell: bash

    - name: Set Outputs
      id: set-outputs
      run: |
        echo "::set-output name=coverage::${COVERAGE}"
        echo "::set-output name=build_time::${BUILD_TIME}"
      shell: bash

    outputs:
      coverage: ${{ steps.set-outputs.outputs.coverage }}
      build_time: ${{ steps.set-outputs.outputs.build_time }}

  sonarcloud:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt' 
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        projectKey: saicharanakula_devops-challenge
        organization: saicharanakula
        args: >
         -Dsonar.organization=saicharanakula
         -Dsonar.projectKey=saicharanakula_devops-challenge
         -Dsonar.sources=app.py
         -Dsonar.tests=test_app.py
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check SAST results
      id: check-sast
      run: |
        ANALYSIS_KEY=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/project_analyses/search?project=saicharanakula_devops-challenge" | jq -r '.analyses[0].key')
        SAST_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=${ANALYSIS_KEY}" | jq -r '.projectStatus.status')
        echo "SAST_STATUS=${SAST_STATUS}"
      shell: bash

    - name: Set SAST Output
      id: set-sast-output
      run: echo "::set-output name=sast_status::${SAST_STATUS}"
      shell: bash

    outputs:
      sast_status: ${{ steps.set-sast-output.outputs.sast_status }}

  deploy:
    needs: sonarcloud
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest behave requests pytest-cov

    - name: Add SSH key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem

    - name: Deploy to AWS EC2
      run: |
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
          docker stop app
          docker rm app
          docker pull charan0026/devopa-app:latest
          docker run -d -p 80:80 --name=app charan0026/devopa-app:latest
        "
    
    - name: Run Cucumber tests
      run: behave -D base_url=http://${{ secrets.EC2_IP }}

    - name: Remove SSH key
      run: rm ec2-key.pem

  monitor_kpis:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Monitor build time
      run: |
        if [ -z "${{ needs.build.outputs.build_time }}" ]; then
          echo "Build time not set, failing pipeline"
          exit 1
        fi
        echo "Build time: ${{ needs.build.outputs.build_time }} seconds"

    - name: Monitor test coverage
      run: |
        if [ -z "${{ needs.build.outputs.coverage }}" ]; then
          echo "Test coverage not set, failing pipeline"
          exit 1
        fi
        echo "Test coverage: ${{ needs.build.outputs.coverage }}%"
        if [ "${{ needs.build.outputs.coverage }}" -lt 90 ]; then
          echo "Test coverage too low, failing pipeline"
          exit 1
        fi

    - name: Monitor SAST scan status
      run: |
        if [ -z "${{ needs.sonarcloud.outputs.sast_status }}" ]; then
          echo "SAST status not set, failing pipeline"
          exit 1
        fi
        echo "SAST Scan Status: ${{ needs.sonarcloud.outputs.sast_status }}"
        if [ "${{ needs.sonarcloud.outputs.sast_status }}" != "OK" ]; then
          echo "SAST scan failed, failing pipeline"
          exit 1
        fi

    - name: Monitor deployment success
      run: |
        if ! curl -f http://${{ secrets.EC2_IP }}/items; then
          echo "Deployment failed, failing pipeline"
          exit 1
        fi
        echo "Deployment successful!"
